function trajectory_cartesian = calculate_cartesian_trajectory(trajectory_joint, parameters)

    trajectory_cartesian = struct(...
        't', trajectory_joint.t, ...
        ...
        'x', zeros(size(trajectory_joint.t)), ...
        'y', zeros(size(trajectory_joint.t)), ...
        'z', zeros(size(trajectory_joint.t)), ...
        ...
        'sx', zeros(size(trajectory_joint.t)), ...
        'sy', zeros(size(trajectory_joint.t)), ...
        'sz', zeros(size(trajectory_joint.t)), ...
        's',  zeros(size(trajectory_joint.t)), ...
        ...
        'vx', zeros(size(trajectory_joint.t)), ...
        'vy', zeros(size(trajectory_joint.t)), ...
        'vz', zeros(size(trajectory_joint.t)), ...
        'v', zeros(size(trajectory_joint.t)));
    
    %% Położenia
    for index = 1:length(trajectory_joint.t)
        [~, X] = forward_kinematic(trajectory_joint.theta_1(index), trajectory_joint.theta_2(index), trajectory_joint.theta_3(index), parameters);
        trajectory_cartesian.x(index) = X(1);
        trajectory_cartesian.y(index) = X(2);
        trajectory_cartesian.z(index) = X(3);
    end
    
    %% Prędkości
    [vx, vy, vz, v] = calculate_cartesian_speed_from_joints(trajectory_joint, parameters);
    
    trajectory_cartesian.vx = vx;
    trajectory_cartesian.vy = vy;
    trajectory_cartesian.vz = vz;
    trajectory_cartesian.v = v;
    
    %% Droga
    trajectory_cartesian.sx = cumsum(abs(trajectory_cartesian.vx) .* [0, diff(trajectory_cartesian.t)]);
    trajectory_cartesian.sy = cumsum(abs(trajectory_cartesian.vy) .* [0, diff(trajectory_cartesian.t)]);
    trajectory_cartesian.sz = cumsum(abs(trajectory_cartesian.vz) .* [0, diff(trajectory_cartesian.t)]);
    trajectory_cartesian.s = cumsum(trajectory_cartesian.v .* [0, diff(trajectory_cartesian.t)]);
end

